# Form implementation generated from reading ui file 'Pantalla.ui'
#
# Created by: PyQt6 UI code generator 6.7.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtGui import QPixmap, QMovie
from PyQt6.QtCore import QTimer
from PyQt6.QtWidgets import QApplication
#import recursos_rc
import sys

from Menu import Ui_Form
from Sesion2 import Sesion


class Ui_PantallaDeCarga(QtWidgets.QWidget):
    def setupUi(self, PantallaDeCarga):
        # Configuración del QWidget
        PantallaDeCarga.setObjectName("PantallaDeCarga")
        PantallaDeCarga.resize(1280, 800)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Maximum, QtWidgets.QSizePolicy.Policy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        PantallaDeCarga.setSizePolicy(sizePolicy)
        PantallaDeCarga.setMinimumSize(QtCore.QSize(1280, 800))
        PantallaDeCarga.setMaximumSize(QtCore.QSize(1280, 800))
        PantallaDeCarga.setAutoFillBackground(False)

        # Crear un QLabel para mostrar el GIF
        self.label_gif = QtWidgets.QLabel(PantallaDeCarga)
        self.label_gif.setGeometry(0, 0, 1280, 800)  # Ajusta el tamaño según sea necesario
        self.label_gif.setStyleSheet("background: transparent;")
        self.label_gif.setScaledContents(True)  # Asegúrate de que esto esté presente

        # Crear el QMovie con la ruta del GIF
        movie = QMovie("Pantallas/Imagenes/2.gif")

        # Verifica si el QMovie se carga correctamente
        if not movie.isValid():
            print("El GIF no se pudo cargar. Verifica la ruta.")
            return  # Salir si el GIF no es válido

        # Configurar el QLabel para usar el QMovie
        self.label_gif.setMovie(movie)

        # Iniciar la animación
        movie.start()

        # Asegúrate de que no haya widgets superpuestos que oculten el QLabel
        #PantallaDeCarga.setStyleSheet("background-color: black;")  # O cualquier otro color

        # Opcional: crear otro widget
        self.widget = QtWidgets.QWidget(PantallaDeCarga)
        self.widget.setGeometry(QtCore.QRect(0, 4, 1291, 801))
        self.widget.setObjectName("widget")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.widget)
        self.gridLayout_4.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetDefaultConstraint)
        self.gridLayout_4.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_4.setObjectName("gridLayout_4")
        spacerItem = QtWidgets.QSpacerItem(200, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_4.addItem(spacerItem, 3, 1, 1, 1)
        self.label = QtWidgets.QLabel(parent=self.widget)
        self.label.setMinimumSize(QtCore.QSize(301, 255))
        self.label.setMaximumSize(QtCore.QSize(301, 255))
        self.label.setStyleSheet("border-image: url(Pantallas/Imagenes/VictorTools.png);")
        self.label.setText("")
        self.label.setObjectName("label")
        self.gridLayout_4.addWidget(self.label, 1, 2, 1, 1)
        self.label_3 = QtWidgets.QLabel(parent=self.widget)
        self.label_3.setMinimumSize(QtCore.QSize(161, 101))
        self.label_3.setMaximumSize(QtCore.QSize(161, 101))
        self.label_3.setStyleSheet("border-image: url(Pantallas/Imagenes/ITIZ.png);")
        #pixmap = QPixmap("/Users/Chuch0/Desktop/Entornos/Vic/Pantallas/Imagenes/ITIZ.png")
        #self.label_3.setPixmap(pixmap)
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.gridLayout_4.addWidget(self.label_3, 3, 4, 1, 1)
        self.progressBar = QtWidgets.QProgressBar(parent=self.widget)
        self.progressBar.setMinimumSize(QtCore.QSize(221, 31))
        self.progressBar.setMaximumSize(QtCore.QSize(221, 31))
        self.progressBar.setProperty("value", 10)
        self.progressBar.setObjectName("progressBar")
        self.gridLayout_4.addWidget(self.progressBar, 2, 2, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 220, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_4.addItem(spacerItem1, 0, 2, 1, 1)

        # Temporizador para actualizar la barra de progreso
        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(self.updateProgressBar)
        #self.timer.start(100)  # Actualizar cada 100 ms
        self.timer.start(10)
        self.current_value = 0

        self.label_2 = QtWidgets.QLabel(parent=self.widget)
        self.label_2.setMinimumSize(QtCore.QSize(191, 101))
        self.label_2.setMaximumSize(QtCore.QSize(191, 101))
        self.label_2.setStyleSheet("border-image: url(Pantallas/Imagenes/TecNM.png);")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.gridLayout_4.addWidget(self.label_2, 3, 0, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(230, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_4.addItem(spacerItem2, 3, 3, 1, 1)

        self.retranslateUi(PantallaDeCarga)
        QtCore.QMetaObject.connectSlotsByName(PantallaDeCarga)

    def retranslateUi(self, PantallaDeCarga):
        _translate = QtCore.QCoreApplication.translate
        PantallaDeCarga.setWindowTitle(_translate("PantallaDeCarga", "PantallaDeCarga"))

    def updateProgressBar(self):
        self.current_value += 1
        self.progressBar.setValue(self.current_value)

        # Cuando la barra llegue a 100, detener el temporizador y abrir la siguiente ventana
        if self.current_value >= 100:
            self.timer.stop()
            self.goToSecondWindow()

   


    def goToSecondWindow(self):
        # Crear y mostrar la segunda ventana
        self.second_window = QtWidgets.QWidget()  # Crear un QWidget para la segunda ventana
        ui = Ui_Form()  # Crear una instancia de la clase Ui_Form
        ui.setupUi(self.second_window)  # Configurar la UI de la segunda ventana
        self.second_window.show()  # Mostrar la segunda ventana
        # Forzar que la ventana actual se active y reciba eventos de interacción
        self.second_window.raise_()  # Asegura que la ventana esté al frente
        self.second_window.activateWindow()  # Activa la ventana para que reciba eventos
        #self.setDisabled(True) 
        #self.close()  # Cerrar la ventana actual (PantallaDeCarga)
        PantallaDeCarga.close()  # Cerrar la ventana principal explícitamente
        # Cerrar la ventana Pantalla después de 100 milisegundos
        #QTimer.singleShot(100, self.PantallaDeCarga.close)  # Esto asegura que se cierre después de un pequeño intervalo
        #QApplication.quit()
   

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    PantallaDeCarga = QtWidgets.QWidget()
    ui = Ui_PantallaDeCarga()
    ui.setupUi(PantallaDeCarga)
    PantallaDeCarga.show()
    sys.exit(app.exec())
